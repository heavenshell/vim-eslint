*eslint*	Eslint for Vim.

Version: 0.1.0
Author: Shinya Ohynagi <sohyanagi@gmail.com>
Repository: http://github.com/heavenshell/vim-eslint/
License: BSD, see LICENSE for more details.

==============================================================================
CONTENTS						*eslint-contents*

Introduction		|eslint-introduction|
Install			|eslint-install|
Usage			|eslint-usage|
Changelogs		|eslint-changelog|

==============================================================================
INTRODUCTION						*eslint-introduction*

|Eslint| is a wrapper of Eslint.

==============================================================================
INSTALL							*eslint-install*

Install the distributed files into Vim runtime directory which is usually
~/.vim/, or $HOME/vimfiles on Windows.

If you use built in `package`, you should extract the
file into '~/.vim/pack/*/start' directory.

==============================================================================
TUTORIAL						*eslint-usage*

- Invoke manually

Open TypeScript file and just execute `:Eslint`.

- Automatically lint on save
>
  autocmd BufWritePost *.ts,*.tsx call eslint#run('a', get_winid())
<
1st argument 'a' means add to QuickFix, 'r' means reset QuickFix.
2nd argument `get_winid()` is window id.

- Integrate with Tsuquyomi

You can use Tsuquyomi's `TsuquyomiAsyncGeterr` and eslint.
Set followings to your vimrc.
>
  augroup typescript
    let g:tsuquyomi_disable_quickfix = 1
    let g:tsuquyomi_use_vimproc = 0
    let g:tsuquyomi_completion_detail = 1
    let g:tsuquyomi_tsserver_debug = 0
    let s:ts_notify = 0

    function! s:typescript_after(...)
      call s:upadte_after()
      let cnt = len(getqflist())
      if cnt > 0
        echomsg printf('[TypeScript] %s errors', cnt)
      else
        echomsg '[TypeScript] No error'
      endif
    endfunction
    let g:eslint_callbacks = {
      \ 'after_run': function('s:typescript_after')
      \ }

    function! s:ts_callback(qflist)
      if s:ts_notify == 1
        call setqflist(a:qflist)
        let winid = win_getid()
        echomsg '[Tslint] Start'
        " call tslint#run('a', winid)
        call eslint#run('a', winid)
      endif
      let s:ts_notify = 0
    endfunction

    function! s:ts_check(delay)
      let s:ts_notify = 1
      if g:tsuquyomi_is_available == 1
        " echomsg '[TypeScript] Start'
        call setqflist([])
        call tsuquyomi#registerNotify(function('s:ts_callback'), 'diagnostics')
        call tsuquyomi#asyncCreateFixlist(a:delay)
      else
        let winid = win_getid()
        call tslint#run('a', winid)
      endif
    endfunction

    autocmd InsertLeave,BufWritePost *.ts,*.tsx silent! call s:ts_check(0)
    autocmd TextChanged *.ts,*.tsx call s:ts_check(1000)
  augroup END
<

- Auto fix

Execute `:EslintFix` will fix automatically.
>
==============================================================================
VARIABLES						*eslint-variables*
g:eslint_callbacks					*eslint_callbacls*
		Callback functions
		Default value is {}

g:eslint_config						*eslint_confg*
		Path to eslint config file.
		Default value is ''

g:eslint_path						*eslint_path*

g:eslint_ext						*eslint_ext*
		Default value is '.js,.jsx.ts,.tsx'

g:eslint_enable_cache					*eslint_enable_cache*
		Add --cache
		Default value is 0(disabled)

g:eslint_verbose					*eslint_verbose*
		Show eslint verbose to echo area
		Default value is 0(disabled)

g:eslint_rcfiles					*eslint_rcfiles*
		Search node_module directory by rcfile.
		Default value are
			'.eslintrc.js',
			'.eslintrc',
			'.eslintrc.json',
			'.eslintrc.yaml',
			'.eslintrc.yml',
			'.eslintrc.cjs',
			'package.json',

==============================================================================
CHANGELOG						*eslint-changelog*
2019-03-30
- First release

vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
